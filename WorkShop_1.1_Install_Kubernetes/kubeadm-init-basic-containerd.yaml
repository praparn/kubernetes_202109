apiVersion: kubeadm.k8s.io/v1beta3
kind: InitConfiguration
bootstrapTokens:
- groups:
  - system:bootstrappers:kubeadm:default-node-token
#  - token: "9a08jv.c0izixklcxtmnze7"
#    description: "kubeadm bootstrap token"
  ttl: "24h"
#  - token: "783bde.3f89s0fje9f38fhf"
#    description: "another bootstrap token"
  usages:
  - authentication
  - signing
nodeRegistration:
#  name: "ec2-10-100-0-1"
  criSocket: "/var/run/dockershim.sock"
  taints:
    - key: "kubeadmNode"
      value: "master"
      effect: "NoSchedule"
  ignorePreflightErrors:
    - IsPrivilegedUser
  imagePullPolicy: "IfNotPresent"
localAPIEndpoint:
#  advertiseAddress: "10.100.0.1"
  bindPort: 6443
#certificateKey: "e6a2eb8581237ab72a4f494f30285ec12a9694d750b9785706a83bfcbbbd2204"
#skipPhases:
#  - add/kube-proxy
---

apiVersion: kubeadm.k8s.io/v1beta3
kind: ClusterConfiguration
etcd:
  # one of local or external
  local:
    imageRepository: "k8s.gcr.io"
    imageTag: "3.5.0"
    dataDir: "/var/lib/etcd"
  #  extraArgs:
    #  listen-client-urls: "http://10.100.0.1:2379"
    #serverCertSANs:
    #  - "ec2-10-100-0-1.compute-1.amazonaws.com"
    #peerCertSANs:
    #  - "10.100.0.1"
  # external:
    # endpoints:
    # - "10.100.0.1:2379"
    # - "10.100.0.2:2379"
    # caFile: "/etcd/kubernetes/pki/etcd/etcd-ca.crt"
    # certFile: "/etcd/kubernetes/pki/etcd/etcd.crt"
    # keyFile: "/etcd/kubernetes/pki/etcd/etcd.key"
networking:
  serviceSubnet: "10.96.0.0/12"
  podSubnet: "192.168.0.0/16"
  dnsDomain: "cluster.local"
kubernetesVersion: "v1.22.0"
#controlPlaneEndpoint: "10.100.0.1:6443"
apiServer:
  extraArgs:
    authorization-mode: "Node,RBAC"
    enable-admission-plugins: NamespaceLifecycle,LimitRanger,ServiceAccount,TaintNodesByCondition,Priority,DefaultTolerationSeconds,DefaultStorageClass,StorageObjectInUseProtection,PersistentVolumeClaimResize,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,RuntimeClass,ResourceQuota
    "feature-gates": "RotateKubeletClientCertificate=true, RotateKubeletServerCertificate=true, TTLAfterFinished=true, EphemeralContainers=true, ServiceTopology=true, EndpointSlice=true"
  #extraVolumes:
  #  - name: "some-volume"
  #    hostPath: "/etc/some-path"
  #    mountPath: "/etc/some-pod-path"
  #    readOnly: false
  #    pathType: File
 # certSANs:
 #   - "10.100.1.1"
 #   - "ec2-10-100-0-1.compute-1.amazonaws.com"
  timeoutForControlPlane: 4m0s
controllerManager:
  extraArgs:
    "node-cidr-mask-size": "20"
    "feature-gates": "RotateKubeletClientCertificate=true, RotateKubeletServerCertificate=true, TTLAfterFinished=true, EphemeralContainers=true, ServiceTopology=true, EndpointSlice=true"
  #extraVolumes:
  #  - name: "some-volume"
  #    hostPath: "/etc/some-path"
  #    mountPath: "/etc/some-pod-path"
  #    readOnly: false
  #    pathType: File
scheduler:
  extraArgs:
    #address: "10.100.0.1"
    "feature-gates": "RotateKubeletClientCertificate=true, RotateKubeletServerCertificate=true, TTLAfterFinished=true, EphemeralContainers=true, ServiceTopology=true, EndpointSlice=true"
 # extraVolumes:
 #   - name: "some-volume"
 #     hostPath: "/etc/some-path"
 #     mountPath: "/etc/some-pod-path"
 #     readOnly: false
 #     pathType: File
certificatesDir: "/etc/kubernetes/pki"
imageRepository: "k8s.gcr.io"
clusterName: "KubernetesLab"
---
apiVersion: kubelet.config.k8s.io/v1beta1
kind: KubeletConfiguration
# kubelet specific options here
---
apiVersion: kubeproxy.config.k8s.io/v1alpha1
kind: KubeProxyConfiguration
mode: ipvs